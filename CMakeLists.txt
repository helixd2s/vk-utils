cmake_minimum_required(VERSION 3.20)
project(vku VERSION 0.1.0)
set(PROJECT_NAME vku-test)

# 
IF (WIN32)
  IF(NOT DEFINED VCPKG_PATH OR NOT DEFINED ${VCPKG_PATH})
    set (VCPKG_PATH "C:/vcpkg/")
  ENDIF()

  # trying load GLFW3 from VCPKG in Windows
  IF(NOT DEFINED CMAKE_TOOLCHAIN_FILE OR NOT DEFINED ${CMAKE_TOOLCHAIN_FILE})
    set (CMAKE_TOOLCHAIN_FILE "${VCPKG_PATH}/scripts/buildsystems/vcpkg.cmake")
  ENDIF()

  IF(NOT DEFINED CMAKE_MODULE_PATH OR NOT DEFINED ${CMAKE_MODULE_PATH})
    set (CMAKE_MODULE_PATH "${VCPKG_PATH}/installed/x64-windows")
  ENDIF()
  
  IF(NOT DEFINED glfw3_DIR OR NOT DEFINED ${glfw3_DIR})
    set (glfw3_DIR "${CMAKE_MODULE_PATH}/share/glfw3")
  ENDIF()
ENDIF()

# 
find_package(Vulkan REQUIRED FATAL_ERROR)

# 
set(CMAKE_CXX_STANDARD 20)
set(_src_root_path "${PROJECT_SOURCE_DIR}/")
file(GLOB_RECURSE _source_list 
  LIST_DIRECTORIES false
  "${_src_root_path}/*.inl"
  "${_src_root_path}/*.hpp"
  "${_src_root_path}/*.h"
  "${_src_root_path}/*.cpp"
  "${_src_root_path}/*.c"
)

# 
add_executable(${PROJECT_NAME} ${_source_list})
target_compile_definitions(${PROJECT_NAME} PUBLIC )
target_include_directories(${PROJECT_NAME} PUBLIC 
  ${PROJECT_SOURCE_DIR}/external/include 
  ${PROJECT_SOURCE_DIR}/submodules/*/include 
  ${PROJECT_SOURCE_DIR}/../external/include 
  ${Vulkan_INCLUDE_DIRS}
)
target_link_libraries(${PROJECT_NAME} ${CMAKE_DL_LIBS} ${Vulkan_LIBRARIES})
target_link_directories(${PROJECT_NAME} PUBLIC 
  ${PROJECT_SOURCE_DIR}/external/lib 
  ${PROJECT_SOURCE_DIR}/submodules/*/lib/
  ${PROJECT_SOURCE_DIR}/../external/lib
)
target_precompile_headers(${PROJECT_NAME}
  PUBLIC
  <memory>
  <vector>
  <map>
  <future>
  <iostream>
  <optional>
  <coroutine>
  <tuple>
  <type_traits>
  <utility>
  <unordered_map>
  <iterator>
  <fstream>
  <typeindex>
  <vulkan/vulkan.h>
)

# 
if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest /bigobj /MP /EHa /fsanitize=address /Ot /Od /Oy /Ob0 /GT /GL /GR")
    set(CMAKE_EXE_LINKER_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj /MP /MAP /incremental /debug:fastlink /experimental /errorReport")
endif()

# 
foreach(_source IN ITEMS ${_source_list})
    get_filename_component(_source_path "${_source}" PATH)
    file(RELATIVE_PATH _source_path_rel "${_src_root_path}" "${_source_path}")
    string(REPLACE "/" "\\" _group_path "${_source_path_rel}")
    source_group("${_group_path}" FILES "${_source}")
endforeach()
